function out = GeneAnalysis(cluster_id1, cluster_id2, DA_results, par)
% Transcendental gene analysis of transition process

% Input:
%   cluster_id1: the cluster id of departing cell state
%   cluster_id2: the cluster id of targeting cell state
%   DA_results: The output structure generated by DynamicalAnalysis
%   par.genes: gene names.
%   par.otherkeep: the threshold of minimum membership function included in
%   estimating sharpness \theta. Default is 0.1.
%   par.thresh_tcs: the threshold of abs(TCS-0.5) to define transition cells.
%   Default is 0.45.
%   par.thresh_de_pvalues: the threshold of maximum p value to include in
%   the DE genes test between two states. Default is 1e-3.
%   par.thresh_ms_pvalues: the threshold of maximum p value to distinguish
%   the MS genes. Default is 1e-4.
%   par.thresh_td_genes: the threshold of minimum gene-TCS correlation to
%   define TD genes.
%   par.corr_choice£º the choice of correlation function to measure TD genes. Can be 'pearson','kendall' or 'spearman'.pearson Default is pearson.
%   smooth: whether to smooth the gene expression for display. Default is
%   true.
%   smooth_method: the method to smooth the expression matrix. Can be 'moving','lowess','loess', 'rlowess'. Default is
%   rlowess.
%   smooth_span_trans: the span parameter in rlowess smoothing for
%   transition cells. Default is 0.1.
%   smooth_span : the span parameter in rlowess smoothing for
%   all cells. Default is 0.3.
%   display_genes_label: Whether to display genes label in the expression
%   matrix. Default is true.
%   par.true_labs : the experimental cell labels.

% Output
%   out.genes_ms_g1: MS genes in state 1
%   out.genes_ms_g2: MS genes in state 2
%   out.genes_ih_g1: IH genes in state 1 
%   out.genes_ih_g2: IH genes in state 2 
%   out.genes_trans_up : up-regulated TD genes
%   out.genes_trans_down : down-regulated TD genes
%   out.score_cell : the TCS fitted by logistic function 
%   out.p : the parameters in logisticfunction 
%   out.cell_true_lab : reordered labels of cells 
%%
data_perm = DA_results.data_perm;
class_order = DA_results.class_order;
rho_class = DA_results.rho_class;
[N_cell,N_gene] = size(data_perm);


if ~isfield(par,'cells')
    par.cells = (1:N_cell)';
end

if ~isfield(par,'genes')
    par.genes = (1:N_gene)';
end

if ~isfield(par,'true_labs')
    if isfield(DA_results,'labs_perm')
    par.true_labs = DA_results.labs_perm;
    else
    par.true_labs = nan(N_cell,1);    
    end
end

if ~isfield(par,'thresh_otherkeep')
    par.thresh_otherkeep = 0.1;
end

if ~isfield(par,'thresh_de_pvalues')
    par.thresh_de_pvalues = 1e-3;
end

if ~isfield(par,'thresh_ms_pvalues')
    par.thresh_ms_pvalues = 1e-4;
end

if ~isfield(par,'thresh_td_genes')
    par.thresh_td_genes = 0.5;
end

if ~isfield(par,'thresh_tcs')
    par.thresh_tcs = 0.45;
end

if ~isfield(par,'corr_choice')
    par.corr_choice = 'pearson';
end

if ~isfield(par,'smooth')
    par.smooth = true;  
end

if ~isfield(par,'smooth_method')
    par.smooth_method = 'rlowess';
end

if ~isfield(par,'smooth_span_trans')
    par.smooth_span_trans = 0.1;
end

if ~isfield(par,'smooth_span')
    par.smooth_span = 0.3;
end

if ~isfield(par,'unit_length')
    par.unit_length = 20;
end

if ~isfield(par,'display_genes_label')
    par.display_genes_label = true;
end

if ~isfield(par,'display_mixing_id')
    par.display_mixing_id = true;
end

if ~isfield(par,'flip')
    par.flip = false;
end

if ~isfield(par,'output_heatmap')
    par.output_heatmap = true;
end

if ~isfield(par,'L_select_top_genes')
    par.L_select_top_genes = 5;
end
L_select_top_genes = par.L_select_top_genes;


%% pre-processing the data
g1 = cluster_id1;
g2 = cluster_id2;
genes = par.genes;
cell_id = par.cells;
true_labs = par.true_labs;


id_data = ismember(class_order,[g1 g2]);
data_ini = data_perm(id_data,:);
class_order_ini = class_order(id_data);
id_type = ismember(1:max(class_order),[g1 g2]);
id_ntype = ~id_type;
rho_other = rho_class(id_data,id_ntype);
true_labs_ini = true_labs(id_data);
cell_id_ini = cell_id(id_data);

% only considers the cells transit between two states (useful if g1 is the bifurcation state)
id_data_keep = max(rho_other,[],2)<par.thresh_otherkeep;
data = data_ini(id_data_keep,:);
rho_ini = rho_class(id_data,:);
rho = rho_ini(id_data_keep,:);
class_order_keep = class_order_ini(id_data_keep);
true_labs_keep = true_labs_ini(id_data_keep);
cell_id_keep = cell_id_ini(id_data_keep);
% delete the genes with low variance
std_genes = std(data);
ndelete_gene = std_genes > 0.01;
genes = genes(ndelete_gene);
data = data(:,ndelete_gene);

% two groups of data
bifurid_g1 = class_order_keep == g1;
bifurid_g2 = class_order_keep == g2;
data_g1 = data(bifurid_g1,:);
data_g2 = data(bifurid_g2,:);
rho_g1 = rho(bifurid_g1,:);
rho_g2 = rho(bifurid_g2,:);


score_g1 = rho_g1(:,g1)./(rho_g1(:,g1)+rho_g1(:,g2));
score_g2 = (rho_g2(:,g1))./(rho_g2(:,g1)+rho_g2(:,g2));
[score1,sort1] = sort(score_g1,'descend');
[score2,sort2] = sort(score_g2,'descend');

lab_g1 = true_labs_keep(bifurid_g1);
lab_g2 = true_labs_keep(bifurid_g2);
cell_id_g1 = cell_id_keep(bifurid_g1);
cell_id_g2 = cell_id_keep(bifurid_g2);
lab_sort = [lab_g1(sort1);lab_g2(sort2)];
cell_id_sort = [cell_id_g1(sort1);cell_id_g2(sort2)];


%sort the cells
[PValues, TValues] = mattest(data_g1',data_g2');
select_id = PValues < par.thresh_de_pvalues;%0.05
genes = genes(select_id);
data_g1 = data_g1(:,select_id);
data_g2 = data_g2(:,select_id);
data_g1_sort = data_g1(sort1,:);
data_g2_sort = data_g2(sort2,:);
t_keep = TValues(select_id);
data_all = [data_g1_sort;data_g2_sort];
score_logistic = [score1;score2];
id_sep = length(sort1);


%% logistic transition
% data normalization

%sort the genes
[N_cell, N_genes] = size(data_all);

L = length(score_logistic);
h = 1/(L-1);
x_fit = 0:h:1;
[score_pre, p_logistic, ~, ~] = fit_logistic(x_fit',score_logistic);


% the transition score of genes
id_trans = abs(score_pre-0.5)< par.thresh_tcs;
data_trans = data_all(id_trans,:);
data_trans = normalize_data(data_trans);
data_trans_smooth = smooth_data(data_trans,par.smooth_span_trans,par.smooth_method);
gene_score_trans = zeros(N_genes,1);

for k = 1: N_genes
gene_temp = data_trans_smooth(:,k);
gene_max = max(gene_temp);
gene_min = min(gene_temp);
gene_temp = (gene_temp-gene_min)/(gene_max-gene_min);

    if isempty(gene_temp)
    error('No transition cells detected. Please check state id or adjust threshold of transition cells.');
    end

gene_score_trans(k) = corr(gene_temp,score_pre(id_trans),'Type',par.corr_choice);
    if gene_score_trans(k)* t_keep(k) < 0
    gene_score_trans(k) = 0;
    end
end
%% trans

gene_keep_id = abs(gene_score_trans)> par.thresh_td_genes;
gene_score_trans = gene_score_trans(gene_keep_id);

data_trans_keep = data_trans_smooth(:,gene_keep_id);
genes_trans = genes(gene_keep_id);
data_all_tran_genes = data_all(:,gene_keep_id);
data_all_tran_genes = normalize_data(data_all_tran_genes);

[gene_score_sort,gene_sort]= sort(gene_score_trans);
data_all_sort_trans = data_trans_keep(:,gene_sort);
gene_name_sort = genes_trans(gene_sort);
data_all_tran_genes_sort = data_all_tran_genes(:,gene_sort);

trans_up_id = gene_score_sort < 0 ;
trans_down_id = gene_score_sort > 0 ;
data_all_tran_genes_sort_up = data_all_tran_genes_sort(:,trans_up_id);
data_all_tran_genes_sort_down = data_all_tran_genes_sort(:,trans_down_id);

L_trans_up = size(data_all_tran_genes_sort_up,2);
select_L_trans_up = min(L_trans_up,L_select_top_genes);

L_trans_down = size(data_all_tran_genes_sort_down,2);
select_L_trans_down = min(L_trans_down,L_select_top_genes);

data_trans_up_select = data_all_tran_genes_sort_up(:,1:select_L_trans_up);
data_trans_down_select = data_all_tran_genes_sort_down(:,(L_trans_down-select_L_trans_down+1):L_trans_down);

mean_trans_up = mean(data_trans_up_select,2);
mean_trans_down = mean(data_trans_down_select,2);


%% differential expression
%
id_g1_stable = (score_pre-0.5)> par.thresh_tcs;
id_g2_stable = (0.5-score_pre)> par.thresh_tcs;

n_keep = ~gene_keep_id;
genes_n_trans = genes(n_keep);
data_g1_sort = data_g1_sort(:,n_keep);
data_g2_sort = data_g2_sort(:,n_keep);
data_all = [data_g1_sort;data_g2_sort];

data_all = normalize_data(data_all);
[PValues, TScores] = mattest(data_g1_sort',data_g2_sort');
gene_keep_id = PValues < par.thresh_de_pvalues;
t_keep = TScores(gene_keep_id);
p_keep = PValues(gene_keep_id);
data_keep = data_all(:,gene_keep_id);
genes_keep = genes_n_trans(gene_keep_id);


id_up = t_keep>0;
data_up = data_keep(:,id_up);
p_up = p_keep(id_up);
genes_up = genes_keep(id_up);

data_up_stable = data_up(id_g1_stable,:);
data_up_trans = data_up(id_trans,:);
[p_marker_up,~] = mattest(data_up_stable',data_up_trans');
[p_marker_up_sort,id_up_sort] = sort(p_marker_up,'ascend');
id_sig_up = p_marker_up_sort > par.thresh_ms_pvalues;
data_up_sort = data_up(:,id_up_sort);

data_ms_g1 = data_up_sort(:,~id_sig_up);
data_ih_g1 = data_up_sort(:,id_sig_up);

L_ms_g1 = size(data_ms_g1,2);
L_ih_g1 = size(data_ih_g1,2);
select_L_ms_g1 = min(L_ms_g1,L_select_top_genes);
select_L_ih_g1 = min(L_ih_g1,L_select_top_genes);
data_ms_g1_select = data_ms_g1(:,1:select_L_ms_g1);
data_ih_g1_select = data_ih_g1(:,(L_ih_g1-select_L_ih_g1+1):L_ih_g1);

mean_ms_g1 = mean(data_ms_g1_select,2);
std_ms_g1 = std(data_ms_g1_select');
mean_ih_g1 = mean(data_ih_g1_select,2);
std_ih_g1 = std(data_ih_g1_select');


genes_up_sort = genes_up(id_up_sort);
genes_up_diff = genes_up_sort(~id_sig_up);
genes_up_undif = genes_up_sort(id_sig_up);


data_smooth_up = smooth_data(data_up_sort,par.smooth_span,par.smooth_method);

L_genes_up = length(genes_up);


id_down = t_keep<0;
data_down = data_keep(:,id_down);
p_down = p_keep(id_down);
genes_down = genes_keep(id_down);


data_down_stable = data_down(id_g2_stable,:);
data_down_trans = data_down(id_trans,:);
[p_marker_down,~] = mattest(data_down_stable',data_down_trans');
[p_marker_down_sort,id_down_sort] = sort(p_marker_down,'descend');
id_sig_down = p_marker_down_sort < par.thresh_ms_pvalues;
data_down_sort = data_down(:,id_down_sort);
genes_down_sort = genes_down(id_down_sort);
genes_down_diff= genes_down_sort(id_sig_down);
genes_down_undiff= genes_down_sort(~id_sig_down);

data_ms_g2 = data_down_sort(:,id_sig_down);
data_ih_g2 = data_down_sort(:,~id_sig_down);

L_ms_g2 = size(data_ms_g2,2);
L_ih_g2 = size(data_ih_g2,2);
select_L_ms_g2 = min(L_ms_g2,L_select_top_genes);
select_L_ih_g2 = min(L_ih_g2,L_select_top_genes);

data_ms_g2_select = data_ms_g2(:,(L_ms_g2-select_L_ms_g2+1):L_ms_g2);
data_ih_g2_select = data_ih_g2(:,1:select_L_ih_g2);

mean_ms_g2 = mean(data_ms_g2_select,2);
std_ms_g2 = std(data_ms_g2_select');
mean_ih_g2 = mean(data_ih_g2_select,2);
std_ih_g2 = std(data_ih_g2_select');

data_smooth_down = smooth_data(data_down_sort,par.smooth_span,par.smooth_method);
L_genes_down = length(genes_down);

genes_trans_up = gene_name_sort(trans_up_id);
genes_trans_down = gene_name_sort(trans_down_id);
gene_ms_g1_select = genes_up_diff(1:select_L_ms_g1);
gene_ih_g1_select = genes_up_undif((L_ih_g1-select_L_ih_g1+1):L_ih_g1);
gene_trans_up_select = genes_trans_up(1:select_L_trans_up);
gene_trans_down_select = genes_trans_down((L_trans_down-select_L_trans_down+1):L_trans_down);
gene_ih_g2_select = genes_down_undiff(1:select_L_ih_g2);
gene_ms_g2_select =genes_down_diff((L_ms_g2-select_L_ms_g2+1):L_ms_g2);

data_whole_select = [data_ms_g1_select,data_ih_g1_select,data_trans_down_select,data_trans_up_select,data_ih_g2_select,data_ms_g2_select];
genes_whole_select = [gene_ms_g1_select,gene_ih_g1_select,gene_trans_up_select,gene_trans_down_select,gene_ih_g2_select,gene_ms_g2_select];
%% plot the figures

L_genes_trans = length(gene_name_sort);
l = par.unit_length;
L_tot = 900;
trans_start =  sum((score_pre-0.5)> par.thresh_tcs);
l_cell = L_tot/N_cell;

%figure('rend','painters','pos',[10 10 L_tot  200])
figure;
score_pre_plot = score_pre;
if par.flip
    score_pre_plot = flip(score_pre_plot);
    trans_start = N_cell - trans_start;
end
plot(x_fit,score_pre_plot,'linewidth',2.0)
hold on
xlim([0 1])
ylim([0 max(score_pre_plot)])
plot(h*[id_sep id_sep], ylim)
plot(h*[trans_start trans_start], ylim)
plot(h*[trans_start+sum(id_trans) trans_start+sum(id_trans)], ylim)
xlabel('Ordered Cells', 'FontSize', 24);
ylabel('TCS', 'FontSize', 24);
xticks(0:30);

set(gca,'xtick',[]);
set(findall(gcf,'-property','FontSize'),'FontSize',18)
box off
set(gca,'color','none')

if par.output_heatmap
    %figure('OuterPosition',[10+l_cell*trans_start 10 sum(id_trans)*l_cell L_genes_trans*l])
    
   if ~any(isnan(data_all_sort_trans))
       disp("Below is the heatmap of transition genes")
       figure;
        colormap redbluecmap;
        clims = [-2 2];
        if par.flip
            data_all_sort_trans = flip(data_all_sort_trans);
        end

        imagesc(data_all_sort_trans',clims);
        set(gca,'ytick',[]);
        set(gca,'xtick',[]);

        if(par.display_genes_label)
            yticks(1:length(gene_name_sort));
            yticklabels(gene_name_sort)
            set(gca,'TickLength',[0 0])
            set(gca, 'FontName', 'Arial')
        end
        %{
        data_scale_org = data_scale(:,gene_keep_id);
        data_all_sort_org = data_scale_org(:,gene_sort);
        figure('rend','painters','pos',[10 10 400 l*L])
        colormap redbluecmap;
        clims = [-3 3];
        imagesc(data_all_sort_org',clims);
        set(gca,'ytick',[]);
        yticks(1:length(gene_name_sort));
        set(gca,'xtick',[]);
        yticklabels(gene_name_sort)
        %}
        out.genes_trans_up = gene_name_sort(trans_up_id);
        out.genes_trans_down = gene_name_sort(trans_down_id);
   end

    %figure('rend','painters','pos',[10 10 900 L_genes_up*l])
    
    if ~any(isnan(data_smooth_up))
        figure;
        disp("Below is the heatmap of down-regulated MS/IH genes")
        colormap redbluecmap;
        clims = [-2 2];
        if par.flip
            data_smooth_up = flip(data_smooth_up);
        end
        imagesc(data_smooth_up',clims);
        hold on 
        plot(get(gca, 'xlim'),[sum(~id_sig_up)+0.5 sum(~id_sig_up)+0.5]);
        set(gca,'ytick',[]);
        set(gca,'xtick',[]);
        if(par.display_genes_label)
        yticks(1:length(genes_up_sort));
        yticklabels(genes_up_sort)
        end
        set(gca,'TickLength',[0 0])
    end
    
    %figure('rend','painters','pos',[10 10 900 L_genes_down*l])
    if ~any(isnan(data_smooth_down))
        figure;
        disp("Below is the heatmap of up-regulated MS/IH genes")

        colormap redbluecmap;
        clims = [-2 2];
        if par.flip
            data_smooth_down = flip(data_smooth_down);
        end
        imagesc(data_smooth_down',clims);
        hold on 
        plot(get(gca, 'xlim'),[sum(~id_sig_down)+0.5 sum(~id_sig_down)+0.5]);

        set(gca,'ytick',[]);
        set(gca,'xtick',[]);

        if(par.display_genes_label)
            yticks(1:length(genes_down_sort));
            yticklabels(genes_down_sort)
            set(gca,'TickLength',[0 0])
        end
    end
    
    figure;
    disp("Below is the heatmap of all top genes")
    colormap redbluecmap;
    data_whole_select = normalize_data(data_whole_select);
    data_whole_select_smooth = smooth_data(data_whole_select,par.smooth_span,par.smooth_method);
    imagesc(data_whole_select_smooth',clims);
    hold on
    plot(get(gca, 'xlim'),[select_L_ms_g1+0.5 select_L_ms_g1+0.5]);
    plot(get(gca, 'xlim'),[select_L_ms_g1+select_L_ih_g1+0.5 select_L_ms_g1+select_L_ih_g1+0.5]);
    plot(get(gca, 'xlim'),[select_L_trans_down+select_L_ms_g1+select_L_ih_g1+0.5 select_L_trans_down+select_L_ms_g1+select_L_ih_g1+0.5]);
    plot(get(gca, 'xlim'),[select_L_trans_up+select_L_trans_down+select_L_ms_g1+select_L_ih_g1+0.5 select_L_trans_up+select_L_trans_down+select_L_ms_g1+select_L_ih_g1+0.5]);
    plot(get(gca, 'xlim'),[select_L_ih_g2+select_L_trans_up+select_L_trans_down+select_L_ms_g1+select_L_ih_g1+0.5 select_L_ih_g2+select_L_trans_up+select_L_trans_down+select_L_ms_g1+select_L_ih_g1+0.5]);
    set(gca,'ytick',[]);
    set(gca,'xtick',[]);
    if(par.display_genes_label)
            yticks(1:length(genes_whole_select));
            yticklabels(genes_whole_select)
            set(gca,'TickLength',[0 0])
            set(gca, 'FontName', 'Arial')
    end
    
    if par.display_mixing_id
        figure;        
        disp("Below is the gradual cell indentity change of the interested process")
        c1 = par.colors(cluster_id1,:);
        c2 = par.colors(cluster_id2,:);
        cell_length = length(score_logistic);
        colors_p = [linspace(c1(1),c2(1),cell_length)', linspace(c1(2),c2(2),cell_length)', linspace(c1(3),c2(3),cell_length)'];
        colormap(colors_p)
        imagesc((1-score_logistic)',[0 1])
        axis off
    end
end


if ~any(isnan(mean_ms_g1))
figure;
PlotGeneTrend(mean_ms_g1,par);
hold on
PlotGeneTrend(mean_ih_g1,par);
legend('MS-smoothed(down-regulated)','MS-raw(down-regulated)','IH-smoothed(down-regulated)','IH-raw(down-regulated)')
end


if ~any(isnan(mean_trans_down))
PlotGeneTrend(mean_trans_down,par);
legend('MS-smoothed(down-regulated)','MS-raw(down-regulated)','IH-smoothed(down-regulated)','IH-raw(down-regulated)','TD-smoothed(down-regulated)','TD-raw(down-regulated)')
end

if ~any(isnan(mean_ms_g2))
figure;
PlotGeneTrend(mean_ms_g2,par);
hold on
PlotGeneTrend(mean_ih_g2,par);
legend('MS(up-regulated)','MS-raw(up-regulated)','IH-smoothed(up-regulated)','IH-raw(up-regulated)')
end

if ~any(isnan(mean_trans_up))
PlotGeneTrend(mean_trans_up,par);
legend('MS(up-regulated)','MS-raw(up-regulated)','IH-smoothed(up-regulated)','IH-raw(up-regulated)','TD-smoothed(up-regulated)','TD-raw(up-regulated)')
end
%% output
out.genes_ms_g1 = genes_up_diff;
out.genes_ms_g2 = genes_down_diff;
out.genes_ih_g1 = genes_up_undif;
out.genes_ih_g2 = genes_down_undiff;

out.score_cell = score_logistic;
out.score_gene = gene_score_sort;   
out.cell_true_lab = lab_sort;
out.cell_id_sort = cell_id_sort;
out.p = p_logistic;
end